{"/":{"title":"PowerBI.","content":"\nHost your second brain and [digital garden](https://jzhao.xyz/posts/networked-thought) for free. Quartz features\n\n## 重点DAX\n[[TOPN]]\n[[SUMX]]\n\n## 测试\n\n","lastmodified":"2022-12-14T09:04:12.081952335Z","tags":null},"/notes/DAX/ALL":{"title":"","content":"\n---\n\n返回表中的所有行或列中的所有值，忽略可能已应用的任何筛选器。\n\n## 语法\n\n```js\nALL ( [\u003c表名或列名\u003e] , [ \u003c列名\u003e, … ] )\n```\n\n|PARAMETER|ATTRIBUTES|DESCRIPTION|\n|--|--|--|\n|表名或列名|Optional|模型中物理表或物理列的名称|\n|列名|Optional |Repeatable|\n\n同一基表中的列。只有当此列也在位于第一参数中时，才可以在后续可选参数中使用\n\n## 返回值\n\n#表  作为表函数使用时，ALL返回完整的表或具有一列或多列的表；作为 CALULCATE 调节器使用时，ALL 移除参数中已应用的任何直接筛选器。\n\n## 备注\n\n当用于 CALCULATE 或 CALCULATETABLE的筛选器参数时，ALL 不会返回表，而是和 REMOVEFILTERS 一样，从筛选上下文中删除相应的筛选。从避免歧义的角度，建议在这种情况下使用 REMOVEFILTERS。\n\n当 ALL 至少有一个参数时，它可以作为表表达式使用。没有参数的 ALL 只能作为 CALCULATE 或 CALCULATETABLE 的调节器使用，并且从筛选上下文中删除所有的筛选。\n\n以下内容在使用 ALL 作为表表达式时是有效的：\n\n-   使用表参数时，ALL 返回表的所有行，包括任何重复的行。\n    \n-   使用单列参数，ALL 返回该列的所有唯一值。\n    \n-   使用两列或多列参数，ALL 返回多列中所有唯一的值组合。\n    \n-   在每一种情况下，ALL 都会在结果中包含为无效关系生成的额外空白行。\n    \n\n## 示例\n\n```js\nALL ( Customer )    //返回完整的客户表\n```\n\n```js\nALL ( Customer[Country], Customer[State] , Customer[City] )    //返回客户表来自国家、州、城市三列的所有不重复组\n```\n\n```js\nCALCULATE ( COUNTROWS ( Sales ), ALL ( Customer ) )    //删除客户表的所有筛选\n```\n\n```js\nALL ( Customer ) //返回完整的客户表\n```\n\n```js\nALL ( Customer[Country], Customer[State] , Customer[City] ) //返回客户表来自国家、州、城市三列的所有不重复组合\n```\n\n```js\nCALCULATE ( COUNTROWS ( Sales ), ALL ( Customer ) ) //删除客户表的所有筛选\n```\n\n```js\nALL ( Customer )    //返回完整的客户表\n```\n\n```js\nALL ( Customer[Country], Customer[State] , Customer[City] )    //返回客户表来自国家、州、城市三列的所有不重复组合\n```\n\n```js\nCALCULATE ( COUNTROWS ( Sales ), ALL ( Customer ) )    //删除客户表的所有筛选\n```\n\n```js\n--\n--  ALL with a table works on the expanded table, removing filters\n--  from any column in the expanded table\n--\nEVALUATE\nCALCULATETABLE (\n    {\n         ( \"Sales Amount \", [Sales Amount] ),\n         ( \"Sales Amount (ALL Colors)\", CALCULATE (\n            [Sales Amount],\n            ALL ( 'Product'[Color] )\n        ) ),\n         ( \"Sales Amount (ALL Products)\", CALCULATE (\n            [Sales Amount],\n            ALL ( 'Product' )\n        ) ),\n         ( \"Sales Amount (ALL)\", CALCULATE (\n            [Sales Amount],\n            ALL ()\n        ) ),\n         ( \"Sales Amount (ALL Sales)\", CALCULATE (\n            [Sales Amount],\n            ALL ( Sales )\n        ) )\n    },\n    'Product'[Color] = \"Red\",\n    'Date'[Calendar Year] = \"CY 2008\"\n)\n```\n\n![[Pasted image 20211107221430.png]]\n\n## 进阶\n\n[[ALLEXCEPT VS ALL VS VALUES]]\n\n[[理解ALL家族]]","lastmodified":"2022-12-14T09:04:12.081952335Z","tags":null},"/notes/DAX/ALLEXCEPT":{"title":"","content":"\n```dataview\nlist web\nwhere file.name = this.file.name\n```\n\n删除表中所有筛选器，已应用于指定列的筛选器除外。\n\n## 语法\n\n```js\nALLEXCEPT ( \u003cTableName\u003e, \u003cColumnName\u003e [, \u003cColumnName\u003e [, … ] ] ) \n```\n\n| PARAMETER  | ATTRIBUTES | DESCRIPTION                                                  |\n| ---------- | ---------- | ------------------------------------------------------------ |\n| TableName  |            | 基表，已存在的物理表                                         |\n| ColumnName | 可重复     | 当 ALLEXCEPT 作为 CALCULATE 调节器时，需要保留筛选效果的列或表。它们必须是第一个参数所在的扩展表的一部分。 |\n\n## 返回值\n\n表，整张表或具有一列或多列的表\n\n## 备注\n\n1.  当作为 [[CALCULATE]] 或 [[CALCULATETABLE]] 的调节器使用时，ALLEXCEPT 从第一个参数指定的扩展表中删除筛选器，只保留后续参数指定的列中的筛选器。\n2.  当作为表函数使用时，ALLEXCEPT 从第一参数中排除后续参数指定的列，返回表中剩余所有列的唯一组合。在这种情况下，**结果只考虑当前表的列，忽略扩展表**。\n\n## 示例\n\n```js\n--  Returns all the 'Product' columns\nEVALUATE\nALL ( 'Product' )\n     \n--  Returns all the 'Product' columns but ProductKey and Product Code\nEVALUATE\nALLEXCEPT ( 'Product', 'Product'[ProductKey], 'Product'[Product Code] )\n```\n\n```js\n--  In this example, ALLEXCEPT ignores Sales expanded table filters\n--  except the cross-filters coming from Date and the column Product[Color]\nDEFINE\n    MEASURE Sales[# Sales] = COUNTROWS ( Sales )\nEVALUATE\nCALCULATETABLE (\n    {\n         ( 1, \"# Sales (CY 2009 - Red)\", [# Sales] ),\n         ( 2, \"# Sales (CY 2009)\",       CALCULATE ( [# Sales], ALLEXCEPT ( Sales, 'Date' ) ) ),\n         ( 3, \"# Sales (Red)\",           CALCULATE ( [# Sales], ALLEXCEPT ( Sales, 'Product'[Color] ) ) ),\n         ( 4, \"# Sales\",                 CALCULATE ( [# Sales], REMOVEFILTERS ( ) ) )\n    },\n    'Product'[Color] = \"Red\",\n    'Date'[Calendar Year] = \"CY 2009\"\n)\nORDER BY [Value1]\n```\n\n![[Pasted image 20220717185248.png]]\n\n用作表函数时，会忽略扩展表的筛选，所以下面TABLE FUNCTION显示为sales的总行数\n\n```js\nCALCULATETABLE (\n    {\n        ( \"FILTER\", COUNTROWS ( Sales ) ),\n        ( \"CALCULATE FILTER Color \", CALCULATE ( COUNTROWS ( Sales ), ALLEXCEPT ( Sales, 'Product' ) ) ),\n        ( \"CALCULATE FILTER Year\", CALCULATE ( COUNTROWS ( Sales ), ALLEXCEPT ( Sales, 'Date' ) ) ),\n        (\"CALCULATE\", CALCULATE ( COUNTROWS ( Sales ), 'Date'[Calendar Year]=\"CY 2008\")),\n        ( \"TABLE FUNCTION\", COUNTROWS ( ALLEXCEPT ( Sales, 'Date' ) ) )\n    },\n    'Date'[Calendar Year] = \"CY 2009\",\n    'Product'[Color] = \"Red\"\n)\n```\n\n![[Pasted image 20220717185258.png]]\n\n## 相关\n\n```dataview\nlist \nwhere contains(tags, \"调节器\")\nor contains(tags, \"all家族\")\n```\n\n## 进阶\n\n[[ALLEXCEPT VS ALL And VALUES]]","lastmodified":"2022-12-14T09:04:12.081952335Z","tags":null},"/notes/DAX/BLANK":{"title":"","content":"\n返回空白\n\n## 语法\n\n```js\nBLANK ( )\n```\n\n## 返回值\n\n#标量 一个任意类型的值， 空值没有数据类型\n\n## 备注\n\n-   BLANK 值在与其他值比较时自动转换类型。\n-   检查一个值是否为 BLANK 的正确方法是使用运算符 == 或 ISBLANK 函数。不要使用运算符 = 。\n-   运算符==是一个 “严格等于 “的运算符，它将 BLANK 与 0 或空字符串区别对待。\n\n\u003e BLANK 不对应 SQL 中的 NULL。DAX 中的 BLANK 不遵循 NULL 在 SQL 中的计算逻辑。在中间结果可能是 BLANK 的表达式中，必须注意这种区别。\n\n## 示例\n\n```js\n--  BLANK is equal to 0 and to an empty string in DAX.\n--  You need to use == to check for \"strictly equal to\"\nEVALUATE\n    {\n        ( \"Blank = 0\", BLANK () = 0 ),\n        ( \"Blank = \"\"\"\"\", BLANK () = \"\" ),\n        ( \"Blank == 0\", BLANK () == 0 ),\n        ( \"Blank == \"\"\"\"\", BLANK () == \"\" )\n    }\n```\n\n![](https://s2.loli.net/2022/05/21/3fgU6xb7BeQa9Vc.png)\n\n\n```js\n--  BLANK is useful also to provide BLANK arguments to some functions\n--  like DATESBETWEEN.\nEVALUATE\n    DATESBETWEEN (\n        'Date'[Date],\n        DATE ( 2011, 12, 20 ),\n        BLANK ()\n    )\nORDER BY 'Date'[Date]\n```\n\n![](https://s2.loli.net/2022/05/21/hWOHAwXpfa8guRn.png)\n\n\n\n```js\n--  BLANK returns the BLANK value\n--\n--  It is mostly useful to blank out the result of a calculation\n--  toor  perform comparisons.\nDEFINE\n    MEASURE Customer[EmptyNames] =\n        CALCULATE (\n            COUNTROWS ( Customer ),\n            Customer[Customer Name] == BLANK ()\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    Customer[Continent],\n    \"Customers\", COUNTROWS ( Customer ),\n    \"Customers with blank name\", [EmptyNames]\n)\n```\n\n![](https://s2.loli.net/2022/05/21/p47gPHz8rKeVEob.png)\n\n\n## 相关函数\n\n[[ISBLANK]]\n\n## 进阶\n\n[[优化DAX代码可能存在空值的条件]]\n\n[[处理DAX中的空白]]\n","lastmodified":"2022-12-14T09:04:12.081952335Z","tags":null},"/notes/DAX/CALCULATE":{"title":"","content":"[CALCULATE – DAX Guide](https://dax.guide/calculate/)\n在筛选器参数修改过的上下文中对表达式进行求值。\n\n\n## 语法\n\n```js\nCALCULATE( \u003c表达式\u003e, [ \u003c筛选器 1\u003e ], [ \u003c筛选器 2\u003e ] … )\n```\n\n|PARAMETER|ATTRIBUTES|DESCRIPTION|\n|---|--|--|\n|表达式||要计值的表达式|\n|筛选器参数||可选\u003cbr\u003e可重复|\n\n定义筛选器的布尔表达式或返回表的表表达式\n\n## 返回值\n\n#标量 任意类型的值\n\n该值是在表达式修改后的筛选上下文中计算的结果\n\n## 备注\n\n-   每个筛选器参数都可以删除筛选器（如 ALL、ALLEXCEPT、ALLNOBLANKROW）、还原筛选器（ALLSELECTED），或者使用一个表表达式，返回一列，多列或整个扩展表的值列表。\n    \n-   当筛选器参数是单列形式的条件判断表达式时，该表达式被嵌入到一个筛选引用列所有值的 [[FILTER#语法]] 表达式中。例如，筛选器参数示意中的第一个表达式的高亮部分在内部被转换为第二个表达式的高亮部分，两种形式完全等价。所以，**除了 CALCULATE 调节器之外，其他形式的筛选器参数的本质都是表**。\n    \n-   筛选器参数会覆盖同一列上已有的任何筛选器，你可以使用 KEEPFILTERS 改变这种默认行为。\n    \n    \n\n## 示例\n\n```js\n--  The compact syntax (boolean) is expanded in the full syntax\n--  prior to the evaluation\nDEFINE\n    MEASURE Sales[Red Sales] =\n        CALCULATE ( [Sales Amount], 'Product'[Color] = \"Red\" )\n    MEASURE Sales[Red Sales Full] =\n        CALCULATE (\n            [Sales Amount],\n            FILTER ( ALL ( 'Product'[Color] ), 'Product'[Color] = \"Red\" )\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Sales Amount],\n    \"Red Sales\", [Red Sales],\n    \"Red Sales Full\", [Red Sales Full]\n)\n```\n\n```js\n--  You can use any condition as an argument, as long as it can\n--  be converted into a table by the DAX engine\nDEFINE\n    MEASURE Sales[Red Blue Sales] =\n        CALCULATE ( [Sales Amount], 'Product'[Color] IN { \"Red\", \"Blue\" } )\n    MEASURE Sales[Red Blue Sales Full] =\n        CALCULATE (\n            [Sales Amount],\n            FILTER ( ALL ( 'Product'[Color] ), 'Product'[Color] IN { \"Red\", \"Blue\" } )\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Sales Amount],\n    \"Red Blue Sales\", [Red Blue Sales],\n    \"Red Blue Sales Full\", [Red Blue Sales Full]\n)\n```\n\n```js\n--  The KEEPFILTERS modifier does not remove an existing filter\nDEFINE\n    MEASURE Sales[Red Blue Sales Keepfilters] =\n        CALCULATE (\n            [Sales Amount],\n            KEEPFILTERS ( 'Product'[Color] IN { \"Red\", \"Blue\" } )\n        )\n    MEASURE Sales[Red Blue Sales] =\n        CALCULATE (\n            [Sales Amount],\n            'Product'[Color] IN { \"Red\", \"Blue\" }\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Sales Amount],\n    \"Red Blue Sales\", [Red Blue Sales],\n    \"Red Blue Sales Keepfilters\", [Red Blue Sales Keepfilters]\n)\n```\n\n```js\n--  When CALCULATE is executed in a row context, it transforms\n--  the row contexts in equivalent filter contexts\nDEFINE\n    MEASURE Sales[Yearly Avg] =\n        AVERAGEX (\n            VALUES ( 'Date'[Calendar Year] ),\n            CALCULATE (\n                SUMX ( Sales, Sales[Quantity] * Sales[Net Price] )\n            )\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Sales Amount],\n    \"Yearly Avg\", [Yearly Avg]\n)\n```\n\n```js\n--  CALCULATE is implicitly added to any measure reference\nDEFINE\n    MEASURE Sales[Sales Amount] =\n        SUMX ( Sales, Sales[Quantity] * Sales[Net Price] )\n    MEASURE Sales[Yearly Avg] =\n        AVERAGEX (\n            VALUES ( 'Date'[Calendar Year] ),\n            CALCULATE (\n                SUMX ( Sales, Sales[Quantity] * Sales[Net Price] )\n            )\n        )\n    MEASURE Sales[Yearly Avg 2] =\n        AVERAGEX (\n            VALUES ( 'Date'[Calendar Year] ),\n            [Sales Amount]\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Sales Amount],\n    \"Yearly Avg\", [Yearly Avg],\n    \"Yearly Avg 2\", [Yearly Avg 2]\n)\n```\n\n```js\n--  CALCULATE evaluation steps:\n--      1. Evaluation of filter arguments\n--      2. Context transition\n--      3. Evaluation of CALCULATE modifiers\n--      4. Application of filter arguments and KEEPFILTERS\nDEFINE\n    MEASURE Sales[Test] =\n        AVERAGEX (\n            VALUES ( 'Date'[Calendar Year] ),\n            CALCULATE (\n                [Sales Amount],\n                'Product'[Category] = \"Audio\",\n                KEEPFILTERS ( 'Product'[Color] IN { \"Red\", \"Blue\" } ),\n                USERELATIONSHIP ( Sales[Delivery Date], 'Date'[Date] )\n            )\n        )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Sales Amount\", [Test]\n)\n```\n\n## 进阶\n\n[[CALCULATE中的筛选器参数]]\n\n[[CALCULATE中的行上下文转换和筛选器参数]]\n\n[[5章 理解CALCULATE和CALCULATETABLE函数]]\n\n[[CALCULATE指南]]\n\n---\n\n## 调节器\n```dataview\nlist from #调节器 \n````","lastmodified":"2022-12-14T09:04:12.085952365Z","tags":null},"/notes/DAX/SUMX":{"title":"","content":"返回为表中的每一行计算的表达式的和。\n参考来源：https://dax.guide/filter/\n## 语法\n\n```js\nSUMX ( \u003c表名\u003e, \u003c表达式\u003e )\n```\n| PARAMETER                                                    | ATTRIBUTES | DESCRIPTION                                                  |\n| :----------------------------------------------------------- | :--------- | :----------------------------------------------------------- |\n| Table |      | The table containing the rows for which the expression will be evaluated. |\n| Expression  |      | The expression to be evaluated for each row of the table.    |\n\n\n## 返回值\n\n#标量 一个任何类型的值\n\n## 备注\n\n-   SUMX 函数将表或返回表的表达式作为其第一参数。 第二参数是要计算总和的数字的列，或更常用的返回标量结果的表达式。\n    \n-   SUMX 仅对列中的数字进行计数。 空白、逻辑值和文本会被忽略。\n    \n\n迭代整张表，并对表的每一行执行计算，最后聚合结果以生成所需的单个值\n\n## 示例\n\n```js\n--  SUM is the short version of SUMX, when used with one column only\n--  SUMX is required to evaluate formulas, instead of columns\nDEFINE\n    MEASURE Sales[# Quantity 1] = SUM ( Sales[Quantity] )\n    MEASURE Sales[# Quantity 2] = SUMX ( Sales, Sales[Quantity] )\n    MEASURE Sales[Sales Amount] =\n        SUMX ( Sales, Sales[Quantity] * Sales[Net Price] )\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"Quantity 1\", [# Quantity 1],\n    \"Quantity 2\", [# Quantity 2],\n    \"Sales Amount\", [Sales Amount]\n)\n```\n\n```js\n--  SUMX is needed to iterate the content of a variable,\n--  indeed SUM works only with columns in the model\nDEFINE\n    MEASURE Sales[Sales Amount] =\n        SUMX ( Sales, Sales[Quantity] * Sales[Net Price] )\n    MEASURE Sales[SUM Monthly Sales] =\n        VAR MonthlySales =\n            ADDCOLUMNS (\n                DISTINCT ( 'Date'[Calendar Year Month] ),\n                \"@MonthlySales\", [Sales Amount]\n            )\n        VAR FilteredSales =\n            FILTER ( MonthlySales, [@MonthlySales] \u003e 10000 )\n        VAR Result =\n            -- Iterator required to aggregate the @MonthlySales column       \n            SUMX ( FilteredSales, [@MonthlySales] )\n        RETURN\n            Result\nEVALUATE\nSUMMARIZECOLUMNS (\n    'Product'[Color],\n    \"SUM Monthly Sales\", [SUM Monthly Sales]\n)\n```\n\n```js\nSum of Margin for High School = \nSUMX(\n  FILTER(\n    FactInternetSales,\n    RELATED(DimCustomer[EnglishEducation])=\"High School\"\n  ),\n  FactInternetSales[SalesAmount]-FactInternetSales[TotalProductCost]\n)\n```\n\n```js\nSum of Sales by Customer = \nSUMX(\n  CALCULATETABLE(\n    FactInternetSales,\n    DimCustomer[EnglishEducation]=\"High School\"\n  ),\n  FactInternetSales[SalesAmount]-FactInternetSales[TotalProductCost]\n)\n```\n\n```js\nSUMX with OR = \nSUMX(\n  FILTER (\n    'Global-Superstore',\n    OR (\n      'Global-Superstore'[Category] = \"Furniture\",\n      'Global-Superstore'[Sub-Category]=\"Chairs\"\n    )\n    ), \n    'Global-Superstore'[Sales]\n)\n```\n\n![[Pasted image 20211103180014.png]]\n\n## 进阶\n\n[[迭代器的嵌套优化]]\n\n[[理解迭代器]]\n\n## 相关函数\n```dataview\ntable score\nfrom \"函数\"\nwhere contains(tags,\"迭代\")\nsort score\n```","lastmodified":"2022-12-14T09:04:12.085952365Z","tags":null},"/notes/DAX/TOPN":{"title":"","content":"\n\n\n\n\n\n\n\n\n\n\n\n\n### 各品类的Top3商品\n\n```js\n    GENERATE (\n        ALLSELECTED ( 'Product'[Category] ),         -- For each category\n        TOPN (                                       -- retrieve the top\n            3,                                       -- three product \n            ALLSELECTED ( 'Product'[Product Name] ), -- names based on the\n            [Sales Amount]                           -- sales amount\n        )\n    )\n```\n![](https://s2.loli.net/2022/05/30/hcCHmxZFdqjAQ86.png)\n\n在线尝试\n[DAX.do by SQLBI](https://dax.do/xYyEreWadfpALx/)","lastmodified":"2022-12-14T09:04:12.085952365Z","tags":null}}